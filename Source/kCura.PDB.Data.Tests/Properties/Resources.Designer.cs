//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace kCura.PDB.Data.Tests.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("kCura.PDB.Data.Tests.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N&apos;MockHours&apos; AND TABLE_SCHEMA = N&apos;EDDSDBO&apos;) 
        ///BEGIN
        ///
        ///	CREATE TABLE [eddsdbo].[MockHours](
        ///		[HourTimeStamp] [datetime] NOT NULL,
        ///	 CONSTRAINT [PK_MockHours] PRIMARY KEY CLUSTERED 
        ///	(
        ///		[HourTimeStamp] ASC
        ///	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
        ///	) ON [PRIMARY]
        ///
        ///END.
        /// </summary>
        internal static string _0001_Create_MockHours {
            get {
                return ResourceManager.GetString("_0001_Create_MockHours", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N&apos;MockBackupSet&apos; AND TABLE_SCHEMA = N&apos;EDDSDBO&apos;) 
        ///BEGIN
        ///
        ///	CREATE TABLE [eddsdbo].[MockBackupSet](
        ///		[Server] [nvarchar](150) NOT NULL,
        ///		[Database] [nvarchar](100) NOT NULL,
        ///		[BackupStartDate] [datetime] NOT NULL,
        ///		[BackupEndDate] [datetime] NULL,
        ///		[BackupType] [char](1) NOT NULL,
        ///	 CONSTRAINT [PK_MockBackupSet] PRIMARY KEY CLUSTERED 
        ///	(
        ///		[Server] ASC,
        ///		[Database] ASC,
        ///		[BackupStartDate] ASC
        ///	)WITH (PAD_INDEX = OFF, STATI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string _0002_Create_MockBackupSet {
            get {
                return ResourceManager.GetString("_0002_Create_MockBackupSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N&apos;MockDbccServerResults&apos; AND TABLE_SCHEMA = N&apos;EDDSDBO&apos;) 
        ///BEGIN
        ///
        ///	CREATE TABLE [eddsdbo].[MockDbccServerResults](
        ///		[Server] [nvarchar](150) NOT NULL,
        ///		[Database] [nvarchar](100) NOT NULL,
        ///		[CaseArtifactId] [int] NULL,
        ///		[LastCleanDbccDate] [datetime] NOT NULL,
        ///	 CONSTRAINT [PK_MockDbccServerResults] PRIMARY KEY CLUSTERED 
        ///	(
        ///		[Server] ASC,
        ///		[Database] ASC,
        ///		[LastCleanDbccDate] ASC
        ///	)WITH (PAD_INDEX = OFF, STATISTICS_NOREC [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string _0003_Create_MockDbccServerResults {
            get {
                return ResourceManager.GetString("_0003_Create_MockDbccServerResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N&apos;MockDatabasesChecked&apos; AND TABLE_SCHEMA = N&apos;EDDSDBO&apos;) 
        ///BEGIN
        ///
        ///	CREATE TABLE [eddsdbo].[MockDatabasesChecked](
        ///		[Server] [nvarchar](150) NOT NULL,
        ///		[Database] [nvarchar](100) NOT NULL,
        ///		[CreatedOn] [datetime] NOT NULL,
        ///	 CONSTRAINT [PK_MockDatabasesChecked] PRIMARY KEY CLUSTERED 
        ///	(
        ///		[Server] ASC,
        ///		[Database] ASC,
        ///		[CreatedOn] ASC
        ///	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCK [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string _0004_Create_MockDatabasesChecked {
            get {
                return ResourceManager.GetString("_0004_Create_MockDatabasesChecked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N&apos;MockServer&apos; AND TABLE_SCHEMA = N&apos;EDDSDBO&apos;) 
        ///BEGIN
        ///
        ///	CREATE TABLE [eddsdbo].[MockServer](
        ///		[ServerID] [int] IDENTITY(1,1) NOT NULL,
        ///		[ServerName] [nvarchar](150) NULL,
        ///		[CreatedOn] [datetime] NOT NULL,
        ///		[DeletedOn] [datetime] NULL,
        ///		[ServerTypeID] [int] NOT NULL,
        ///		[IgnoreServer] [bit] NULL,
        ///		[ArtifactID] [int] NULL,
        ///		[LastServerBackup] [datetime] NULL,
        ///	 CONSTRAINT [PK_MockServer] PRIMARY KEY CLUSTERED 
        ///	(
        ///		[ServerID [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string _0005_Create_MockServer {
            get {
                return ResourceManager.GetString("_0005_Create_MockServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N&apos;MockServer&apos; AND TABLE_SCHEMA = N&apos;EDDSDBO&apos;) 
        ///BEGIN
        ///DROP TABLE eddsdbo.[MockServer]
        ///END
        ///
        ///CREATE TABLE [eddsdbo].[MockServer](
        ///		[Id] int IDENTITY(1,1) NOT NULL,
        ///		[ServerID] [int] NOT NULL
        /// CONSTRAINT [PK_MockServer] PRIMARY KEY CLUSTERED 
        ///(
        ///	[Id] ASC
        ///)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
        /// CONSTRAINT [UQ_ServerId] UNIQUE NO [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string _0006_Recreate_MockServer {
            get {
                return ResourceManager.GetString("_0006_Recreate_MockServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N&apos;MockHours&apos; AND TABLE_SCHEMA = N&apos;EDDSDBO&apos;) 
        ///BEGIN
        ///	DROP TABLE eddsdbo.[MockHours]
        ///END
        ///
        ///CREATE TABLE [eddsdbo].[MockHours](
        ///		[Id] int IDENTITY(1,1) NOT NULL,
        ///		[HourId] [int] NOT NULL
        /// CONSTRAINT [PK_MockHours] PRIMARY KEY CLUSTERED 
        ///(
        ///	[Id] ASC
        ///)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
        /// CONSTRAINT [UQ_HourId] UNIQUE NONCLUSTERED 
        ///(
        ///	[Hou [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string _0007_Recreate_MockHours {
            get {
                return ResourceManager.GetString("_0007_Recreate_MockHours", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- EDDSPerformance
        ///IF EXISTS (select 1 from sysobjects where [name] = &apos;QoS_BackupDBCCReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE eddsdbo.QoS_BackupDBCCReport
        ///END
        ///GO
        ///CREATE PROCEDURE eddsdbo.QoS_BackupDBCCReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;GapSize&apos;,
        ///	@SortDirection CHAR(4) = &apos;DESC&apos;,
        ///	@TimezoneOffset INT = 0, --Offset to use (in minutes) for UTC dates
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@Server NVARCHAR(150) = NULL,
        ///	@Database NVARCHAR(150 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_QoS_BackupDBCCReport {
            get {
                return ResourceManager.GetString("eddsdbo_QoS_BackupDBCCReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (select 1 from sysobjects where [name] = &apos;QoS_RecoverabilityIntegrityReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE eddsdbo.QoS_RecoverabilityIntegrityReport
        ///END
        ///GO
        ///CREATE PROCEDURE eddsdbo.QoS_RecoverabilityIntegrityReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;RecoverabilityIntegrityScore&apos;,
        ///	@SortDirection CHAR(4) = &apos;ASC&apos;,
        ///	@TimezoneOffset INT = 0, --Offset to use (in minutes) for UTC dates
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@SummaryDayHour [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_QoS_RecoverabilityIntegrityReport {
            get {
                return ResourceManager.GetString("eddsdbo_QoS_RecoverabilityIntegrityReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --EDDSPerformance
        ///IF EXISTS (select 1 from sysobjects where [name] = &apos;QoS_RecoveryObjectivesReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE eddsdbo.QoS_RecoveryObjectivesReport
        ///END
        ///GO
        ///CREATE PROCEDURE eddsdbo.QoS_RecoveryObjectivesReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;(RTOScore + RPOScore)/2&apos;,
        ///	@SortDirection CHAR(4) = &apos;ASC&apos;,
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@Server NVARCHAR(255) = NULL,
        ///	@DBName NVARCHAR(255) = NULL, 
        ///	@RPOScore INT = NULL, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_QoS_RecoveryObjectivesReport {
            get {
                return ResourceManager.GetString("eddsdbo_QoS_RecoveryObjectivesReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (select 1 from sysobjects where [name] = &apos;QoS_SystemLoadServerReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE EDDSDBO.QoS_SystemLoadServerReport
        ///END
        ///GO
        ///CREATE PROCEDURE EDDSDBO.QoS_SystemLoadServerReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;Score&apos;,
        ///	@SortDirection CHAR(4) = &apos;ASC&apos;,
        ///	@TimezoneOffset INT = 0, --Offset to use (in minutes) for UTC dates
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@SummaryDayHour DATETIME = NULL,
        ///	@Server NVARCHAR(150) =  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_QoS_SystemLoadServerReport {
            get {
                return ResourceManager.GetString("eddsdbo_QoS_SystemLoadServerReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (select 1 from sysobjects where [name] = &apos;QoS_SystemLoadWaitsReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE EDDSDBO.QoS_SystemLoadWaitsReport
        ///END
        ///GO
        ///CREATE PROCEDURE EDDSDBO.QoS_SystemLoadWaitsReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;WaitsScore&apos;,
        ///	@SortDirection CHAR(4) = &apos;ASC&apos;,
        ///	@TimezoneOffset INT = 0, --Offset to use (in minutes) for UTC dates
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@SummaryDayHour DATETIME = NULL,
        ///	@Server NVARCHAR(150)  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_QoS_SystemLoadWaitsReport {
            get {
                return ResourceManager.GetString("eddsdbo_QoS_SystemLoadWaitsReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (select 1 from sysobjects where [name] = &apos;QoS_UptimeReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE EDDSDBO.QoS_UptimeReport
        ///END
        ///GO
        ///
        ///CREATE PROCEDURE EDDSDBO.QoS_UptimeReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;Uptime ASC, SummaryDayHour&apos;, --Lowest uptime first, then most recent
        ///	@SortDirection CHAR(4) = &apos;DESC&apos;,
        ///	@TimezoneOffset INT = 0, --Offset to use (in minutes) for UTC dates
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@SummaryDayHour DATETIME  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_QoS_UptimeReport {
            get {
                return ResourceManager.GetString("eddsdbo_QoS_UptimeReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (select 1 from sysobjects where [name] = &apos;QoS_UserExperienceSearchReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE EDDSDBO.QoS_UserExperienceSearchReport
        ///END
        ///GO
        ///CREATE PROCEDURE EDDSDBO.QoS_UserExperienceSearchReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;PercentLongRunning&apos;,
        ///	@SortDirection CHAR(4) = &apos;DESC&apos;,
        ///	@TimezoneOffset INT = 0, --Offset to use (in minutes) for UTC dates
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@SummaryDayHour DATETIME = NULL,        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_QoS_UserExperienceSearchReport {
            get {
                return ResourceManager.GetString("eddsdbo_QoS_UserExperienceSearchReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (select 1 from sysobjects where [name] = &apos;QoS_UserExperienceServerReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE EDDSDBO.QoS_UserExperienceServerReport
        ///END
        ///GO
        ///CREATE PROCEDURE EDDSDBO.QoS_UserExperienceServerReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;Score&apos;,
        ///	@SortDirection CHAR(4) = &apos;ASC&apos;,
        ///	@TimezoneOffset INT = 0, --Offset to use (in minutes) for UTC dates
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@SummaryDayHour DATETIME = NULL,
        ///	@Server NVAR [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_QoS_UserExperienceServerReport {
            get {
                return ResourceManager.GetString("eddsdbo_QoS_UserExperienceServerReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (select 1 from sysobjects where [name] = &apos;QoS_UserExperienceWorkspaceReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE EDDSDBO.QoS_UserExperienceWorkspaceReport
        ///END
        ///GO
        ///CREATE PROCEDURE EDDSDBO.QoS_UserExperienceWorkspaceReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;TotalRuns&apos;,
        ///	@SortDirection CHAR(4) = &apos;DESC&apos;,
        ///	@TimeZoneOffset INT = 0, --Offset to use (in minutes) for UTC dates
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@SummaryDayHour DATETIME = NULL,        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_QoS_UserExperienceWorkspaceReport {
            get {
                return ResourceManager.GetString("eddsdbo_QoS_UserExperienceWorkspaceReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (select 1 from sysobjects where [name] = &apos;RecoverabilityIntegritySummaryReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE eddsdbo.RecoverabilityIntegritySummaryReport
        ///END
        ///GO
        ///
        ///CREATE PROCEDURE eddsdbo.RecoverabilityIntegritySummaryReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;OverallScore&apos;,
        ///	@SortDirection CHAR(4) = &apos;ASC&apos;,
        ///	@TimezoneOffset INT = 0, --Offset to use (in minutes) for UTC dates
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@SummaryDayHour DATE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_RecoverabilityIntegritySummaryReport {
            get {
                return ResourceManager.GetString("eddsdbo_RecoverabilityIntegritySummaryReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (select 1 from sysobjects where [name] = &apos;RecoverabilityObjectivesReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE eddsdbo.RecoverabilityObjectivesReport
        ///END
        ///GO
        ///CREATE PROCEDURE eddsdbo.RecoverabilityObjectivesReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;(RTOScore + RPOScore)/2&apos;,
        ///	@SortDirection CHAR(4) = &apos;ASC&apos;,
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@Server NVARCHAR(255) = NULL,
        ///	@DBName NVARCHAR(255) = NULL, 
        ///	@RPOScore INT = NULL,
        ///	@RTOScore  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsdbo_RecoverabilityObjectivesReport {
            get {
                return ResourceManager.GetString("eddsdbo_RecoverabilityObjectivesReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- EDDSPerformance
        ///IF EXISTS (select 1 from sysobjects where [name] = &apos;RecoverabilityGapsReport&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE eddsdbo.RecoverabilityGapsReport
        ///END
        ///GO
        ///
        ///CREATE PROCEDURE eddsdbo.RecoverabilityGapsReport
        ///	/* Grid conditions */
        ///	@SortColumn VARCHAR(50) = &apos;GapSize&apos;,
        ///	@SortDirection CHAR(4) = &apos;DESC&apos;,
        ///	@TimezoneOffset INT = 0, --Offset to use (in minutes) for UTC dates
        ///	@StartRow INT = 1,
        ///	@EndRow INT = 25,
        ///	/* Filter conditions */
        ///	@Server NVARCHAR(150) = NULL,
        ///	@Databas [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EddsDependentModifiedSprocs {
            get {
                return ResourceManager.GetString("EddsDependentModifiedSprocs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /****** Object:  Schema [eddsdbo]    Script Date: 8/7/2018 8:34:20 PM ******/
        ///CREATE SCHEMA [eddsdbo]
        ///GO
        ////****** Object:  Schema [HangFire]    Script Date: 8/7/2018 8:34:20 PM ******/
        ///CREATE SCHEMA [HangFire]
        ///GO
        ////****** Object:  Table [eddsdbo].[AgentHistory]    Script Date: 8/7/2018 8:34:20 PM ******/
        ///SET ANSI_NULLS ON
        ///GO
        ///SET QUOTED_IDENTIFIER ON
        ///GO
        ///CREATE TABLE [eddsdbo].[AgentHistory](
        ///	[ID] [int] IDENTITY(1,1) NOT NULL,
        ///	[AgentArtifactId] [int] NOT NULL,
        ///	[TimeStamp] [datetime] NOT NULL,
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eddsperf {
            get {
                return ResourceManager.GetString("eddsperf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] EDDSPerformance {
            get {
                object obj = ResourceManager.GetObject("EDDSPerformance", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF not exists(select top 1 * from [eddsdbo].[MetricTypes])
        ///BEGIN
        ///	INSERT INTO [eddsdbo].[MetricTypes]
        ///           ([ID]
        ///           ,[Name]
        ///           ,[Description]
        ///           ,[SampleType])
        ///     VALUES
        ///			-- Uptime
        ///			(1, &apos;Agent Uptime&apos;, null, 1),
        ///			(2, &apos;Web Uptime&apos;, null, 1),
        ///			-- User Experience
        ///			(10, &apos;Long Running Querries&apos;, null, 0),
        ///			(11, &apos;Conversion Speed&apos;, null, 0),
        ///			-- Infrastructure Performance
        ///			(20, &apos;Ram&apos;, null, 0),
        ///			(21, &apos;Cpu&apos;, null, 0),
        ///			(22, &apos;Number of Agents Per Server&apos;, null, 0) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EddsPerformanceExtra {
            get {
                return ResourceManager.GetString("EddsPerformanceExtra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = &apos;eddsdbo&apos; AND TABLE_NAME = &apos;UserExperienceWorkspaceDetail&apos;)
        ///	DROP VIEW eddsdbo.UserExperienceWorkspaceDetail;
        ///	
        ///IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = &apos;eddsdbo&apos; AND TABLE_NAME = &apos;UserExperienceSearchDetail&apos;)
        ///	DROP VIEW eddsdbo.UserExperienceSearchDetail;
        ///	
        ///IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = &apos;eddsdbo&apos; AND TABLE_NAME = &apos;UserExperienceServerDetail&apos;)
        ///	DROP VIEW eddsdb [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EVERYTIME_RecreateViews {
            get {
                return ResourceManager.GetString("EVERYTIME_RecreateViews", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (select 1 from sysobjects where [name] = &apos;QoS_ScoreHistory&apos; and type = &apos;P&apos;)  
        ///BEGIN
        ///	DROP PROCEDURE EDDSDBO.QoS_ScoreHistory
        ///END
        ///GO
        ///
        ///CREATE PROCEDURE EDDSDBO.QoS_ScoreHistory
        ///	@startDate DATETIME,
        ///	@endDate DATETIME,
        ///	@servers nvarchar(max)
        ///AS
        ///BEGIN
        ///	--This procedure returns the User Experience and System Load scores for all servers within the desired time range
        ///	DECLARE @serversTable TABLE(ArtifactId int);
        ///	
        ///	DECLARE @x XML
        ///	SELECT @X = CAST(&apos;&lt;A&gt;&apos; + REPLACE(@servers, &apos;,&apos;, &apos;&lt;/A&gt;&lt;A&gt; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QoS_ScoreHistory {
            get {
                return ResourceManager.GetString("QoS_ScoreHistory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE [{{resourcedbname}}]
        ///GO
        ///
        ///SET ANSI_NULLS ON
        ///GO
        ///
        ///SET QUOTED_IDENTIFIER ON
        ///GO
        ///
        ///IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N&apos;[eddsdbo].[ReadDatabaseDbcc]&apos;) AND type in (N&apos;P&apos;, N&apos;PC&apos;))
        ///DROP PROCEDURE [eddsdbo].[ReadDatabaseDbcc]
        ///GO
        ///
        ///CREATE PROCEDURE [eddsdbo].[ReadDatabaseDbcc]
        ///	@databaseName NVARCHAR(255)
        ///WITH EXEC AS SELF
        ///AS
        ///BEGIN
        ///	truncate table [EDDSQoS].[eddsdbo].[DbccInfoResults]
        ///	
        ///	INSERT INTO [EDDSQoS].[eddsdbo].[DbccInfoResults]
        ///	EXECUTE(&apos;DBCC DBINFO([&apos; + @databaseName + &apos;]) WI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ReadDatabaseDbcc {
            get {
                return ResourceManager.GetString("ReadDatabaseDbcc", resourceCulture);
            }
        }
    }
}
