#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace kCura.PDB.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EDDSPerformance")]
	public partial class PDDModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertServerDW(ServerDW instance);
    partial void UpdateServerDW(ServerDW instance);
    partial void DeleteServerDW(ServerDW instance);
    partial void InsertServerProcessorDW(ServerProcessorDW instance);
    partial void UpdateServerProcessorDW(ServerProcessorDW instance);
    partial void DeleteServerProcessorDW(ServerProcessorDW instance);
    partial void InsertSQLServerDW(SQLServerDW instance);
    partial void UpdateSQLServerDW(SQLServerDW instance);
    partial void DeleteSQLServerDW(SQLServerDW instance);
    partial void InsertMeasure(Measure instance);
    partial void UpdateMeasure(Measure instance);
    partial void DeleteMeasure(Measure instance);
    partial void InsertServerDiskDW(ServerDiskDW instance);
    partial void UpdateServerDiskDW(ServerDiskDW instance);
    partial void DeleteServerDiskDW(ServerDiskDW instance);
    #endregion
		

		public PDDModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PDDModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PDDModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PDDModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ServerDW> ServerDWs
		{
			get
			{
				return this.GetTable<ServerDW>();
			}
		}
		
		public System.Data.Linq.Table<ServerProcessorDW> ServerProcessorDWs
		{
			get
			{
				return this.GetTable<ServerProcessorDW>();
			}
		}
		
		public System.Data.Linq.Table<SQLServerDW> SQLServerDWs
		{
			get
			{
				return this.GetTable<SQLServerDW>();
			}
		}
		
		public System.Data.Linq.Table<Measure> Measures
		{
			get
			{
				return this.GetTable<Measure>();
			}
		}
		
		public System.Data.Linq.Table<ServerDiskDW> ServerDiskDWs
		{
			get
			{
				return this.GetTable<ServerDiskDW>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="eddsdbo.LoadLatencyHealthDWData")]
		public int LoadLatencyHealthDWData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProcessExecDate", DbType="DateTime")] System.Nullable<System.DateTime> processExecDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), processExecDate);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="eddsdbo.GetRAMHealthData")]
		public ISingleResult<GetRAMHealthDataResult> GetRAMHealthData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="DateTime")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="DateTime")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeZoneOffset", DbType="Int")] System.Nullable<int> timeZoneOffset)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, timeZoneOffset);
			return ((ISingleResult<GetRAMHealthDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="eddsdbo.GetSQLServerSummaryData")]
		public ISingleResult<GetSQLServerSummaryDataResult> GetSQLServerSummaryData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="DateTime")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="DateTime")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeZoneOffset", DbType="Int")] System.Nullable<int> timeZoneOffset)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, timeZoneOffset);
			return ((ISingleResult<GetSQLServerSummaryDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="eddsdbo.GetServerProcessorSummaryData")]
		public ISingleResult<GetServerProcessorSummaryDataResult> GetServerProcessorSummaryData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="DateTime")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="DateTime")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeZoneOffset", DbType="Int")] System.Nullable<int> timeZoneOffset)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, timeZoneOffset);
			return ((ISingleResult<GetServerProcessorSummaryDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="eddsdbo.LoadDocumentHealthDWData")]
		public int LoadDocumentHealthDWData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProcessExecDate", DbType="DateTime")] System.Nullable<System.DateTime> processExecDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), processExecDate);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="eddsdbo.GetServerDiskSummaryData")]
		public ISingleResult<GetServerDiskSummaryDataResult> GetServerDiskSummaryData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="DateTime")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="DateTime")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeZoneOffset", DbType="Int")] System.Nullable<int> timeZoneOffset)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, timeZoneOffset);
			return ((ISingleResult<GetServerDiskSummaryDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="eddsdbo.GetLRQHealthQueries", IsComposable=true)]
		public IQueryable<GetLRQHealthQueriesResult> GetLRQHealthQueries([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProcessExecDate", DbType="DateTime")] System.Nullable<System.DateTime> processExecDate)
		{
			return this.CreateMethodCallQuery<GetLRQHealthQueriesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), processExecDate);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="eddsdbo.GetApplicationHealthData")]
		public ISingleResult<GetApplicationHealthDataResult> GetApplicationHealthData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="DateTime")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="DateTime")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeZoneOffset", DbType="Int")] System.Nullable<int> timeZoneOffset)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, timeZoneOffset);
			return ((ISingleResult<GetApplicationHealthDataResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="eddsdbo.ServerDW")]
	public partial class ServerDW : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServerDWID;
		
		private System.DateTime _CreatedOn;
		
		private int _ServerID;
		
		private System.Nullable<decimal> _RAMPagesPerSec;
		
		private System.Nullable<decimal> _RAMPageFaultsPerSec;
		
		private System.Nullable<decimal> _TotalPhysicalMemory;
		
		private System.Nullable<decimal> _AvailableMemory;
		
		private System.Nullable<decimal> _RAMPct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServerDWIDChanging(int value);
    partial void OnServerDWIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnServerIDChanging(int value);
    partial void OnServerIDChanged();
    partial void OnRAMPagesPerSecChanging(System.Nullable<decimal> value);
    partial void OnRAMPagesPerSecChanged();
    partial void OnRAMPageFaultsPerSecChanging(System.Nullable<decimal> value);
    partial void OnRAMPageFaultsPerSecChanged();
    partial void OnTotalPhysicalMemoryChanging(System.Nullable<decimal> value);
    partial void OnTotalPhysicalMemoryChanged();
    partial void OnAvailableMemoryChanging(System.Nullable<decimal> value);
    partial void OnAvailableMemoryChanged();
    partial void OnRAMPctChanging(System.Nullable<decimal> value);
    partial void OnRAMPctChanged();
    #endregion
		
		public ServerDW()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerDWID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServerDWID
		{
			get
			{
				return this._ServerDWID;
			}
			set
			{
				if ((this._ServerDWID != value))
				{
					this.OnServerDWIDChanging(value);
					this.SendPropertyChanging();
					this._ServerDWID = value;
					this.SendPropertyChanged("ServerDWID");
					this.OnServerDWIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="Int NOT NULL")]
		public int ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMPagesPerSec", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> RAMPagesPerSec
		{
			get
			{
				return this._RAMPagesPerSec;
			}
			set
			{
				if ((this._RAMPagesPerSec != value))
				{
					this.OnRAMPagesPerSecChanging(value);
					this.SendPropertyChanging();
					this._RAMPagesPerSec = value;
					this.SendPropertyChanged("RAMPagesPerSec");
					this.OnRAMPagesPerSecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMPageFaultsPerSec", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> RAMPageFaultsPerSec
		{
			get
			{
				return this._RAMPageFaultsPerSec;
			}
			set
			{
				if ((this._RAMPageFaultsPerSec != value))
				{
					this.OnRAMPageFaultsPerSecChanging(value);
					this.SendPropertyChanging();
					this._RAMPageFaultsPerSec = value;
					this.SendPropertyChanged("RAMPageFaultsPerSec");
					this.OnRAMPageFaultsPerSecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPhysicalMemory", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> TotalPhysicalMemory
		{
			get
			{
				return this._TotalPhysicalMemory;
			}
			set
			{
				if ((this._TotalPhysicalMemory != value))
				{
					this.OnTotalPhysicalMemoryChanging(value);
					this.SendPropertyChanging();
					this._TotalPhysicalMemory = value;
					this.SendPropertyChanged("TotalPhysicalMemory");
					this.OnTotalPhysicalMemoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableMemory", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> AvailableMemory
		{
			get
			{
				return this._AvailableMemory;
			}
			set
			{
				if ((this._AvailableMemory != value))
				{
					this.OnAvailableMemoryChanging(value);
					this.SendPropertyChanging();
					this._AvailableMemory = value;
					this.SendPropertyChanged("AvailableMemory");
					this.OnAvailableMemoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMPct", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> RAMPct
		{
			get
			{
				return this._RAMPct;
			}
			set
			{
				if ((this._RAMPct != value))
				{
					this.OnRAMPctChanging(value);
					this.SendPropertyChanging();
					this._RAMPct = value;
					this.SendPropertyChanged("RAMPct");
					this.OnRAMPctChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="eddsdbo.ServerProcessorDW")]
	public partial class ServerProcessorDW : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServerProcessorDWID;
		
		private System.DateTime _CreatedOn;
		
		private int _ServerID;
		
		private int _CoreNumber;
		
		private System.Nullable<decimal> _CPUProcessorTimePct;
		
		private string _CPUName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServerProcessorDWIDChanging(int value);
    partial void OnServerProcessorDWIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnServerIDChanging(int value);
    partial void OnServerIDChanged();
    partial void OnCoreNumberChanging(int value);
    partial void OnCoreNumberChanged();
    partial void OnCPUProcessorTimePctChanging(System.Nullable<decimal> value);
    partial void OnCPUProcessorTimePctChanged();
    partial void OnCPUNameChanging(string value);
    partial void OnCPUNameChanged();
    #endregion
		
		public ServerProcessorDW()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerProcessorDWID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServerProcessorDWID
		{
			get
			{
				return this._ServerProcessorDWID;
			}
			set
			{
				if ((this._ServerProcessorDWID != value))
				{
					this.OnServerProcessorDWIDChanging(value);
					this.SendPropertyChanging();
					this._ServerProcessorDWID = value;
					this.SendPropertyChanged("ServerProcessorDWID");
					this.OnServerProcessorDWIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="Int NOT NULL")]
		public int ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoreNumber", DbType="Int NOT NULL")]
		public int CoreNumber
		{
			get
			{
				return this._CoreNumber;
			}
			set
			{
				if ((this._CoreNumber != value))
				{
					this.OnCoreNumberChanging(value);
					this.SendPropertyChanging();
					this._CoreNumber = value;
					this.SendPropertyChanged("CoreNumber");
					this.OnCoreNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPUProcessorTimePct", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> CPUProcessorTimePct
		{
			get
			{
				return this._CPUProcessorTimePct;
			}
			set
			{
				if ((this._CPUProcessorTimePct != value))
				{
					this.OnCPUProcessorTimePctChanging(value);
					this.SendPropertyChanging();
					this._CPUProcessorTimePct = value;
					this.SendPropertyChanged("CPUProcessorTimePct");
					this.OnCPUProcessorTimePctChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPUName", DbType="NVARCHAR(200) NULL")]
		public string CPUName
		{
			get
			{
				return this._CPUName;
			}
			set
			{
				if ((this._CPUName != value))
				{
					this.OnCPUNameChanging(value);
					this.SendPropertyChanging();
					this._CPUName = value;
					this.SendPropertyChanged("CPUName");
					this.OnCPUNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="eddsdbo.SQLServerDW")]
	public partial class SQLServerDW : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SQLServerDWID;
		
		private System.DateTime _CreatedOn;
		
		private int _ServerID;
		
		private System.Nullable<decimal> _SQLPageLifeExpectancy;
		
		private System.Nullable<bool> _LowMemorySignalState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSQLServerDWIDChanging(int value);
    partial void OnSQLServerDWIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnServerIDChanging(int value);
    partial void OnServerIDChanged();
    partial void OnSQLPageLifeExpectancyChanging(System.Nullable<decimal> value);
    partial void OnSQLPageLifeExpectancyChanged();
    partial void OnLowMemorySignalStateChanging(System.Nullable<bool> value);
    partial void OnLowMemorySignalStateChanged();
    #endregion
		
		public SQLServerDW()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SQLServerDWID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SQLServerDWID
		{
			get
			{
				return this._SQLServerDWID;
			}
			set
			{
				if ((this._SQLServerDWID != value))
				{
					this.OnSQLServerDWIDChanging(value);
					this.SendPropertyChanging();
					this._SQLServerDWID = value;
					this.SendPropertyChanged("SQLServerDWID");
					this.OnSQLServerDWIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="Int NOT NULL")]
		public int ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SQLPageLifeExpectancy", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> SQLPageLifeExpectancy
		{
			get
			{
				return this._SQLPageLifeExpectancy;
			}
			set
			{
				if ((this._SQLPageLifeExpectancy != value))
				{
					this.OnSQLPageLifeExpectancyChanging(value);
					this.SendPropertyChanging();
					this._SQLPageLifeExpectancy = value;
					this.SendPropertyChanged("SQLPageLifeExpectancy");
					this.OnSQLPageLifeExpectancyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowMemorySignalState", DbType="BIT NULL")]
		public System.Nullable<bool> LowMemorySignalState
		{
			get
			{
				return this._LowMemorySignalState;
			}
			set
			{
				if ((this._LowMemorySignalState != value))
				{
					this.OnLowMemorySignalStateChanging(value);
					this.SendPropertyChanging();
					this._LowMemorySignalState = value;
					this.SendPropertyChanged("LowMemorySignalState");
					this.OnLowMemorySignalStateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="eddsdbo.Measure")]
	public partial class Measure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeasureID;
		
		private string _MeasureCd;
		
		private string _MeasureDesc;
		
		private int _MeasureTypeId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private int _Frequency;
		
		private System.Nullable<System.DateTime> _LastDataLoadDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeasureIDChanging(int value);
    partial void OnMeasureIDChanged();
    partial void OnMeasureCdChanging(string value);
    partial void OnMeasureCdChanged();
    partial void OnMeasureDescChanging(string value);
    partial void OnMeasureDescChanged();
    partial void OnMeasureTypeIdChanging(int value);
    partial void OnMeasureTypeIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    partial void OnFrequencyChanging(int value);
    partial void OnFrequencyChanged();
    partial void OnLastDataLoadDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastDataLoadDateTimeChanged();
    #endregion
		
		public Measure()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureCd", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MeasureCd
		{
			get
			{
				return this._MeasureCd;
			}
			set
			{
				if ((this._MeasureCd != value))
				{
					this.OnMeasureCdChanging(value);
					this.SendPropertyChanging();
					this._MeasureCd = value;
					this.SendPropertyChanged("MeasureCd");
					this.OnMeasureCdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureDesc", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string MeasureDesc
		{
			get
			{
				return this._MeasureDesc;
			}
			set
			{
				if ((this._MeasureDesc != value))
				{
					this.OnMeasureDescChanging(value);
					this.SendPropertyChanging();
					this._MeasureDesc = value;
					this.SendPropertyChanged("MeasureDesc");
					this.OnMeasureDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureTypeId", DbType="Int NOT NULL")]
		public int MeasureTypeId
		{
			get
			{
				return this._MeasureTypeId;
			}
			set
			{
				if ((this._MeasureTypeId != value))
				{
					this.OnMeasureTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MeasureTypeId = value;
					this.SendPropertyChanged("MeasureTypeId");
					this.OnMeasureTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int NOT NULL")]
		public int Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastDataLoadDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastDataLoadDateTime
		{
			get
			{
				return this._LastDataLoadDateTime;
			}
			set
			{
				if ((this._LastDataLoadDateTime != value))
				{
					this.OnLastDataLoadDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastDataLoadDateTime = value;
					this.SendPropertyChanged("LastDataLoadDateTime");
					this.OnLastDataLoadDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="eddsdbo.ServerDiskDW")]
	public partial class ServerDiskDW : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServerDiskDWID;
		
		private System.DateTime _CreatedOn;
		
		private int _ServerID;
		
		private int _DiskNumber;
		
		private System.Nullable<decimal> _DiskAvgSecPerRead;
		
		private System.Nullable<decimal> _DiskAvgSecPerWrite;
		
		private string _DriveLetter;
		
		private int _DiskFreeMegabytes;
		
		private System.Nullable<long> _DiskSecPerRead;
		
		private System.Nullable<long> _DiskSecPerWrite;
		
		private System.Nullable<long> _FrequencyPerfTime;
		
		private System.Nullable<long> _DiskSecPerReadBase;
		
		private System.Nullable<long> _DiskSecPerWriteBase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServerDiskDWIDChanging(int value);
    partial void OnServerDiskDWIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnServerIDChanging(int value);
    partial void OnServerIDChanged();
    partial void OnDiskNumberChanging(int value);
    partial void OnDiskNumberChanged();
    partial void OnDiskAvgReadsPerSecChanging(System.Nullable<decimal> value);
    partial void OnDiskAvgReadsPerSecChanged();
    partial void OnDiskAvgWritesPerSecChanging(System.Nullable<decimal> value);
    partial void OnDiskAvgWritesPerSecChanged();
    partial void OnDriveLetterChanging(string value);
    partial void OnDriveLetterChanged();
    partial void OnDiskFreeMegabytesChanging(int value);
    partial void OnDiskFreeMegabytesChanged();
    partial void OnDiskSecPerReadChanging(System.Nullable<long> value);
    partial void OnDiskSecPerReadChanged();
    partial void OnDiskSecPerWriteChanging(System.Nullable<long> value);
    partial void OnDiskSecPerWriteChanged();
    partial void OnFrequencyPerfTimeChanging(System.Nullable<long> value);
    partial void OnFrequencyPerfTimeChanged();
    partial void OnDiskSecPerReadBaseChanging(System.Nullable<long> value);
    partial void OnDiskSecPerReadBaseChanged();
    partial void OnDiskSecPerWriteBaseChanging(System.Nullable<long> value);
    partial void OnDiskSecPerWriteBaseChanged();
    #endregion
		
		public ServerDiskDW()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerDiskDWID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServerDiskDWID
		{
			get
			{
				return this._ServerDiskDWID;
			}
			set
			{
				if ((this._ServerDiskDWID != value))
				{
					this.OnServerDiskDWIDChanging(value);
					this.SendPropertyChanging();
					this._ServerDiskDWID = value;
					this.SendPropertyChanged("ServerDiskDWID");
					this.OnServerDiskDWIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="Int NOT NULL")]
		public int ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskNumber", DbType="Int NOT NULL")]
		public int DiskNumber
		{
			get
			{
				return this._DiskNumber;
			}
			set
			{
				if ((this._DiskNumber != value))
				{
					this.OnDiskNumberChanging(value);
					this.SendPropertyChanging();
					this._DiskNumber = value;
					this.SendPropertyChanged("DiskNumber");
					this.OnDiskNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskAvgSecPerRead", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> DiskAvgReadsPerSec
		{
			get
			{
				return this._DiskAvgSecPerRead;
			}
			set
			{
				if ((this._DiskAvgSecPerRead != value))
				{
					this.OnDiskAvgReadsPerSecChanging(value);
					this.SendPropertyChanging();
					this._DiskAvgSecPerRead = value;
					this.SendPropertyChanged("DiskAvgReadsPerSec");
					this.OnDiskAvgReadsPerSecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskAvgSecPerWrite", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> DiskAvgWritesPerSec
		{
			get
			{
				return this._DiskAvgSecPerWrite;
			}
			set
			{
				if ((this._DiskAvgSecPerWrite != value))
				{
					this.OnDiskAvgWritesPerSecChanging(value);
					this.SendPropertyChanging();
					this._DiskAvgSecPerWrite = value;
					this.SendPropertyChanged("DiskAvgWritesPerSec");
					this.OnDiskAvgWritesPerSecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriveLetter", DbType="NVarChar(1)")]
		public string DriveLetter
		{
			get
			{
				return this._DriveLetter;
			}
			set
			{
				if ((this._DriveLetter != value))
				{
					this.OnDriveLetterChanging(value);
					this.SendPropertyChanging();
					this._DriveLetter = value;
					this.SendPropertyChanged("DriveLetter");
					this.OnDriveLetterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskFreeMegabytes", DbType="INT NOT NULL")]
		public int DiskFreeMegabytes
		{
			get
			{
				return this._DiskFreeMegabytes;
			}
			set
			{
				if ((this._DiskFreeMegabytes != value))
				{
					this.OnDiskFreeMegabytesChanging(value);
					this.SendPropertyChanging();
					this._DiskFreeMegabytes = value;
					this.SendPropertyChanged("DiskFreeMegabytes");
					this.OnDiskFreeMegabytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskSecPerRead", DbType="bigint")]
		public System.Nullable<long> DiskSecPerRead
		{
			get
			{
				return this._DiskSecPerRead;
			}
			set
			{
				if ((this._DiskSecPerRead != value))
				{
					this.OnDiskSecPerReadChanging(value);
					this.SendPropertyChanging();
					this._DiskSecPerRead = value;
					this.SendPropertyChanged("DiskSecPerRead");
					this.OnDiskSecPerReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskSecPerWrite", DbType="bigint")]
		public System.Nullable<long> DiskSecPerWrite
		{
			get
			{
				return this._DiskSecPerWrite;
			}
			set
			{
				if ((this._DiskSecPerWrite != value))
				{
					this.OnDiskSecPerWriteChanging(value);
					this.SendPropertyChanging();
					this._DiskSecPerWrite = value;
					this.SendPropertyChanged("DiskSecPerWrite");
					this.OnDiskSecPerWriteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrequencyPerfTime", DbType="bigint")]
		public System.Nullable<long> FrequencyPerfTime
		{
			get
			{
				return this._FrequencyPerfTime;
			}
			set
			{
				if ((this._FrequencyPerfTime != value))
				{
					this.OnFrequencyPerfTimeChanging(value);
					this.SendPropertyChanging();
					this._FrequencyPerfTime = value;
					this.SendPropertyChanged("FrequencyPerfTime");
					this.OnFrequencyPerfTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskSecPerReadBase", DbType="bigint")]
		public System.Nullable<long> DiskSecPerReadBase
		{
			get
			{
				return this._DiskSecPerReadBase;
			}
			set
			{
				if ((this._DiskSecPerReadBase != value))
				{
					this.OnDiskSecPerReadBaseChanging(value);
					this.SendPropertyChanging();
					this._DiskSecPerReadBase = value;
					this.SendPropertyChanged("DiskSecPerReadBase");
					this.OnDiskSecPerReadBaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskSecPerWriteBase", DbType="bigint")]
		public System.Nullable<long> DiskSecPerWriteBase
		{
			get
			{
				return this._DiskSecPerWriteBase;
			}
			set
			{
				if ((this._DiskSecPerWriteBase != value))
				{
					this.OnDiskSecPerWriteBaseChanging(value);
					this.SendPropertyChanging();
					this._DiskSecPerWriteBase = value;
					this.SendPropertyChanged("DiskSecPerWriteBase");
					this.OnDiskSecPerWriteBaseChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetRAMHealthDataResult
	{
		
		private System.Nullable<long> _Id;
		
		private int _ServerID;
		
		private string _ServerName;
		
		private string _ServerTypeName;
		
		private System.Nullable<System.DateTime> _MeasureDate;
		
		private decimal _RAMPagesPerSec;
		
		private decimal _RAMPageFaultsPerSec;
		
		private decimal _RAMPct;
		
		public GetRAMHealthDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt")]
		public System.Nullable<long> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="Int NOT NULL")]
		public int ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this._ServerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ServerName
		{
			get
			{
				return this._ServerName;
			}
			set
			{
				if ((this._ServerName != value))
				{
					this._ServerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServerTypeName
		{
			get
			{
				return this._ServerTypeName;
			}
			set
			{
				if ((this._ServerTypeName != value))
				{
					this._ServerTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MeasureDate
		{
			get
			{
				return this._MeasureDate;
			}
			set
			{
				if ((this._MeasureDate != value))
				{
					this._MeasureDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMPagesPerSec", DbType="Decimal(10,2) NOT NULL")]
		public decimal RAMPagesPerSec
		{
			get
			{
				return this._RAMPagesPerSec;
			}
			set
			{
				if ((this._RAMPagesPerSec != value))
				{
					this._RAMPagesPerSec = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMPageFaultsPerSec", DbType="Decimal(10,2) NOT NULL")]
		public decimal RAMPageFaultsPerSec
		{
			get
			{
				return this._RAMPageFaultsPerSec;
			}
			set
			{
				if ((this._RAMPageFaultsPerSec != value))
				{
					this._RAMPageFaultsPerSec = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMPct", DbType="Decimal(10,2) NOT NULL")]
		public decimal RAMPct
		{
			get
			{
				return this._RAMPct;
			}
			set
			{
				if ((this._RAMPct != value))
				{
					this._RAMPct = value;
				}
			}
		}
	}
	
	public partial class GetSQLServerSummaryDataResult
	{
		
		private System.Nullable<long> _Id;
		
		private int _ServerID;
		
		private string _ServerName;
		
		private string _ServerTypeName;
		
		private System.Nullable<System.DateTime> _MeasureDate;
		
		private decimal _SQLPageLifeExpectancy;
		
		public GetSQLServerSummaryDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt")]
		public System.Nullable<long> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="Int NOT NULL")]
		public int ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this._ServerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ServerName
		{
			get
			{
				return this._ServerName;
			}
			set
			{
				if ((this._ServerName != value))
				{
					this._ServerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServerTypeName
		{
			get
			{
				return this._ServerTypeName;
			}
			set
			{
				if ((this._ServerTypeName != value))
				{
					this._ServerTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MeasureDate
		{
			get
			{
				return this._MeasureDate;
			}
			set
			{
				if ((this._MeasureDate != value))
				{
					this._MeasureDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SQLPageLifeExpectancy", DbType="Decimal(10,2) NOT NULL")]
		public decimal SQLPageLifeExpectancy
		{
			get
			{
				return this._SQLPageLifeExpectancy;
			}
			set
			{
				if ((this._SQLPageLifeExpectancy != value))
				{
					this._SQLPageLifeExpectancy = value;
				}
			}
		}
	}
	
	public partial class GetServerProcessorSummaryDataResult
	{
		
		private System.Nullable<long> _Id;
		
		private System.Nullable<int> _ServerCoreId;
		
		private int _ServerID;
		
		private string _ServerName;
		
		private string _ServerTypeName;
		
		private System.Nullable<System.DateTime> _MeasureDate;
		
		private decimal _CPUProcessorTimePct;
		
		public GetServerProcessorSummaryDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt")]
		public System.Nullable<long> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerCoreId", DbType="Int")]
		public System.Nullable<int> ServerCoreId
		{
			get
			{
				return this._ServerCoreId;
			}
			set
			{
				if ((this._ServerCoreId != value))
				{
					this._ServerCoreId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="Int NOT NULL")]
		public int ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this._ServerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ServerName
		{
			get
			{
				return this._ServerName;
			}
			set
			{
				if ((this._ServerName != value))
				{
					this._ServerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServerTypeName
		{
			get
			{
				return this._ServerTypeName;
			}
			set
			{
				if ((this._ServerTypeName != value))
				{
					this._ServerTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MeasureDate
		{
			get
			{
				return this._MeasureDate;
			}
			set
			{
				if ((this._MeasureDate != value))
				{
					this._MeasureDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPUProcessorTimePct", DbType="Decimal(10,0) NOT NULL")]
		public decimal CPUProcessorTimePct
		{
			get
			{
				return this._CPUProcessorTimePct;
			}
			set
			{
				if ((this._CPUProcessorTimePct != value))
				{
					this._CPUProcessorTimePct = value;
				}
			}
		}
	}
	
	public partial class GetServerDiskSummaryDataResult
	{
		
		private System.Nullable<long> _Id;
		
		private System.Nullable<int> _ServerDiskId;
		
		private int _ServerID;
		
		private string _ServerName;
		
		private string _ServerTypeName;
		
		private System.Nullable<System.DateTime> _MeasureDate;
		
		private int _DiskNumber;
		
		private string _DriveLetter;
		
		private decimal _DiskAvgSecPerRead;
		
		private decimal _DiskAvgSecPerWrite;
		
		public GetServerDiskSummaryDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt")]
		public System.Nullable<long> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerDiskId", DbType="Int")]
		public System.Nullable<int> ServerDiskId
		{
			get
			{
				return this._ServerDiskId;
			}
			set
			{
				if ((this._ServerDiskId != value))
				{
					this._ServerDiskId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="Int NOT NULL")]
		public int ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this._ServerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ServerName
		{
			get
			{
				return this._ServerName;
			}
			set
			{
				if ((this._ServerName != value))
				{
					this._ServerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServerTypeName
		{
			get
			{
				return this._ServerTypeName;
			}
			set
			{
				if ((this._ServerTypeName != value))
				{
					this._ServerTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MeasureDate
		{
			get
			{
				return this._MeasureDate;
			}
			set
			{
				if ((this._MeasureDate != value))
				{
					this._MeasureDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskNumber", DbType="Int NOT NULL")]
		public int DiskNumber
		{
			get
			{
				return this._DiskNumber;
			}
			set
			{
				if ((this._DiskNumber != value))
				{
					this._DiskNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriveLetter", DbType="NVarChar(1)")]
		public string DriveLetter
		{
			get
			{
				return this._DriveLetter;
			}
			set
			{
				if ((this._DriveLetter != value))
				{
					this._DriveLetter = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskAvgSecPerRead", DbType="Decimal(10,2) NOT NULL")]
		public decimal DiskAvgSecPerRead
		{
			get
			{
				return this._DiskAvgSecPerRead;
			}
			set
			{
				if ((this._DiskAvgSecPerRead != value))
				{
					this._DiskAvgSecPerRead = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskAvgSecPerWrite", DbType="Decimal(10,2) NOT NULL")]
		public decimal DiskAvgSecPerWrite
		{
			get
			{
				return this._DiskAvgSecPerWrite;
			}
			set
			{
				if ((this._DiskAvgSecPerWrite != value))
				{
					this._DiskAvgSecPerWrite = value;
				}
			}
		}
	}
	
	public partial class GetLRQHealthQueriesResult
	{
		
		private string _dbLocation;
		
		private string _TotalQry;
		
		private string _TotalNRQry;
		
		private string _LRQQry;
		
		private string _NRLRQQry;
		
		public GetLRQHealthQueriesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dbLocation", DbType="VarChar(50)")]
		public string dbLocation
		{
			get
			{
				return this._dbLocation;
			}
			set
			{
				if ((this._dbLocation != value))
				{
					this._dbLocation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalQry", DbType="VarChar(2000)")]
		public string TotalQry
		{
			get
			{
				return this._TotalQry;
			}
			set
			{
				if ((this._TotalQry != value))
				{
					this._TotalQry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalNRQry", DbType="VarChar(2000)")]
		public string TotalNRQry
		{
			get
			{
				return this._TotalNRQry;
			}
			set
			{
				if ((this._TotalNRQry != value))
				{
					this._TotalNRQry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LRQQry", DbType="VarChar(2000)")]
		public string LRQQry
		{
			get
			{
				return this._LRQQry;
			}
			set
			{
				if ((this._LRQQry != value))
				{
					this._LRQQry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NRLRQQry", DbType="VarChar(2000)")]
		public string NRLRQQry
		{
			get
			{
				return this._NRLRQQry;
			}
			set
			{
				if ((this._NRLRQQry != value))
				{
					this._NRLRQQry = value;
				}
			}
		}
	}
	
	public partial class GetApplicationHealthDataResult
	{
		
		private System.Nullable<long> _Id;
		
		private int _CaseArtifactID;
		
		private string _WorkspaceName;
		
		private string _DatabaseLocation;
		
		private System.Nullable<System.DateTime> _MeasureDate;
		
		private int _UserCount;
		
		private int _ErrorCount;
		
		private int _LRQCount;
		
		private int _AverageLatency;
		
		public GetApplicationHealthDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt")]
		public System.Nullable<long> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseArtifactID", DbType="Int NOT NULL")]
		public int CaseArtifactID
		{
			get
			{
				return this._CaseArtifactID;
			}
			set
			{
				if ((this._CaseArtifactID != value))
				{
					this._CaseArtifactID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkspaceName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string WorkspaceName
		{
			get
			{
				return this._WorkspaceName;
			}
			set
			{
				if ((this._WorkspaceName != value))
				{
					this._WorkspaceName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseLocation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DatabaseLocation
		{
			get
			{
				return this._DatabaseLocation;
			}
			set
			{
				if ((this._DatabaseLocation != value))
				{
					this._DatabaseLocation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MeasureDate
		{
			get
			{
				return this._MeasureDate;
			}
			set
			{
				if ((this._MeasureDate != value))
				{
					this._MeasureDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCount", DbType="Int NOT NULL")]
		public int UserCount
		{
			get
			{
				return this._UserCount;
			}
			set
			{
				if ((this._UserCount != value))
				{
					this._UserCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorCount", DbType="Int NOT NULL")]
		public int ErrorCount
		{
			get
			{
				return this._ErrorCount;
			}
			set
			{
				if ((this._ErrorCount != value))
				{
					this._ErrorCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LRQCount", DbType="Int NOT NULL")]
		public int LRQCount
		{
			get
			{
				return this._LRQCount;
			}
			set
			{
				if ((this._LRQCount != value))
				{
					this._LRQCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageLatency", DbType="Int NOT NULL")]
		public int AverageLatency
		{
			get
			{
				return this._AverageLatency;
			}
			set
			{
				if ((this._AverageLatency != value))
				{
					this._AverageLatency = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
